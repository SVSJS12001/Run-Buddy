* {
  margin: 0; 
  padding: 0; /*To remove default browser-enforced styles, 
  we apply some default CSS values for every element in the 
  page to level the playing field all at once. */
  box-sizing: border-box; /* This is a fix that will instruct
   the browser to ignore padding in the overall width. */
}


body {
  color: #39a6b2;
  font-family: Helvetica, Arial, sans-serif;
}

header { 
  padding: 20px 35px;
  background-color: #39a6b2;
  font-weight: bold;
}
  /* apply styles to <header>
We just told the <header> element to apply 
padding, which means to add space between 
where the <header> starts and where the content 
inside it starts. We also applied a background-color 
of a light blue / teal.
*/
 
header h1 {
 font-weight: bold;
 font-size: 36px;
 color: #fce138;
 margin: 0;
 display: inline; /* So just by adding that one 
 property declaration (display: inline;) and setting 
 the <h1> to inline instead of block, we moved the <nav> 
 on the righthand side up. */
}

header a {
  text-decoration: none;
  color: #fce138;
}

header nav { 
  float: right;
  margin: 7px 0;
}
  /* float: Think of this as similar to the 
  text-wrapping property in Microsoft Word, 
  which takes elements that want to take up 100% 
  of its parent's width by default (known in CSS 
  as block elements) and pushes everything after 
  it below it—even if it physically isn't 100% of 
  its parents width—and allows other elements to 
  come along side of it or wrap around it (known in 
  CSS as inline elements). This property is used when 
  we have HTML elements that would look better side by 
  side, and we want to use our horizontal space in a more 
  meaningful way. */


header nav ul li {
  display: inline;
}

header nav ul li a {
  margin: 0 30px;
  font-weight: lighter;
  font-size: 22px;
}

/* Hero style begins. */

.hero {
  background-image: url("../images/hero-bg.jpg");
  height: 600px; 
  padding: 60px;
  background-size: cover; /*background-size can set the 
  size of the background image to its original size or 
  make it stretched, repeated, or constrained to fit 
  the available space. In our case, the cover assignment 
  will shrink the image so that parts 
  of it won't get clipped. */
  background-position: center; /* Background-position can
  move the initial position of the background image. 
  We'll set this position to center. */
  position: relative;
}

.hero-form {
  border: 3px solid #024e76;
  background-color: #ffde08;
  padding: 20px; /* padding: Creates an inner margin within 
  the border. */
  width: 500px; 
  color: #024e76;
  /* Similar to how padding values were assigned in 
  the last lesson, the border property can be declared
  with a single value that represents one value for all
  four sides. The border property can also be designated 
  for each side: border-top, border-bottom, border-left, 
  border-right. Unlike padding, border can also have style
  and color values declared in addition to width. */
  position: absolute;
  bottom: 120px;
  right: 140px;
 }

 .hero-form h3 {
   font-size: 24px;
   margin: 0;
 }

.hero-form p {
margin: 5px 0 15px 0;
}

.form-input {
  border: 1px solid #024e76; 
  /* A skinny 1px border helped 
  emphasize our sign-up requests. */
  display: block;
  /*This property instructs the browser
   to render the element either as a 
   <block> or inline. Some other <block> 
   elements we've used are: <p>, >div>, and
   all the >h1> to >h6>. 
   Some inline elements we've used are:
   <span>, <a>, and <label> */
  padding: 7px 15px;
  font-size: 16px;
  color: #024e76;
  width: 100%;
  margin-bottom: 15px;
}

.hero-form label { /* Adding some horizontal spacing for 
the <label> element in the radio button 
elements helps the user not misinterpret 
which selection is for which answer. */
  margin: 0 5px;
} 

.hero-form button {
  background-color:#024e76;
  color: #fce138;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: bold;
}
/* HERO STYLES END */



footer {
  background: #fce138;
  width: 100%;
  padding: 40px 35px;
}

footer h2 {
  display: inline; /* same (display inline) property 
  as in the heafer h1 */
  color: #024e76;
  font-size: 30px;
  margin: 0;
}

.SVS:hover {
  color: rgb(240, 6, 6);
  font-style: italic;
}

footer div {
  float: right;
  line-height: 1.5; /* This assigns how much vertical space
   should be between lines of text content. */
  text-align: right; /* This lets us align our text to the 
  left, right, center, or justified. By default, 
  it is left-aligned. */
}

footer a {
  color: #024e76;
}

section {
  padding: 60px;
}